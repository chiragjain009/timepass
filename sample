import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class CcrRequestProcessDetailsServiceTest {

    @Mock
    private ICcrRequestProcessDetailsRepository ccrRequestProcessDetailsRepository;

    @InjectMocks
    private CcrRequestProcessDetailsService ccrRequestProcessDetailsService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateChangeBeginStatusById_Success() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        String status = "OK";
        CcrRequestProcessDetails ccrRequestProcessDetails = mock(CcrRequestProcessDetails.class);
        when(ccrRequestProcessDetailsRepository.findRequestUsingRequestIdAndName(requestId, "CHANGE_BEGIN_STATUS"))
            .thenReturn(ccrRequestProcessDetails);

        // Act
        ccrRequestProcessDetailsService.updateChangeBeginStatusById(requestId, status);

        // Assert
        verify(ccrRequestProcessDetails).setStatus(status);
        verify(ccrRequestProcessDetailsRepository).save(ccrRequestProcessDetails);
    }

    @Test
    public void testUpdateChangeBeginStatusById_RequestNotFound() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        String status = "OK";
        when(ccrRequestProcessDetailsRepository.findRequestUsingRequestIdAndName(requestId, "CHANGE_BEGIN_STATUS"))
            .thenReturn(null);

        // Act & Assert
        try {
            ccrRequestProcessDetailsService.updateChangeBeginStatusById(requestId, status);
            fail("Expected SDPReportingNMSCException");
        } catch (SDPReportingNMSCException e) {
            assertEquals("Exception occurred while trying to find request in T_CCR_REQUEST_PROCESS_DETAILS table using updateChangeBeginStatusById(...)", e.getMessage());
        }
    }

    @Test
    public void testUpdateChangeEndStatusById_Success() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        String status = "OK";
        CcrRequestProcessDetails ccrRequestProcessDetails = mock(CcrRequestProcessDetails.class);
        when(ccrRequestProcessDetailsRepository.findRequestUsingRequestIdAndName(requestId, "CHANGE_END_STATUS"))
            .thenReturn(ccrRequestProcessDetails);

        // Act
        ccrRequestProcessDetailsService.updateChangeEndStatusById(requestId, status);

        // Assert
        verify(ccrRequestProcessDetails).setStatus(status);
        verify(ccrRequestProcessDetailsRepository).save(ccrRequestProcessDetails);
    }

    @Test
    public void testUpdateChangeEndStatusById_RequestNotFound() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        String status = "OK";
        when(ccrRequestProcessDetailsRepository.findRequestUsingRequestIdAndName(requestId, "CHANGE_END_STATUS"))
            .thenReturn(null);

        // Act & Assert
        try {
            ccrRequestProcessDetailsService.updateChangeEndStatusById(requestId, status);
            fail("Expected SDPReportingNMSCException");
        } catch (SDPReportingNMSCException e) {
            assertEquals("Exception occurred while trying to find request in T_CCR_REQUEST_PROCESS_DETAILS table using updateChangeEndStatusById(...)", e.getMessage());
        }
    }

    @Test
    public void testIsAllDependencyCompleted_Success() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        CcrRequestBO ccrRequestBO = mock(CcrRequestBO.class);
        CcrRequestProcessDetails ccrRequestProcessDetails = mock(CcrRequestProcessDetails.class);
        List<Long> dependentOrderIds = Arrays.asList(1L, 2L);
        List<String> dependentStatusList = Arrays.asList("OK", "OK");

        when(ccrRequestBO.getId()).thenReturn(requestId);
        when(ccrRequestProcessDetailsRepository.findRequestUsingRequestIdAndName(requestId, "CHANGE_END_STATUS"))
            .thenReturn(ccrRequestProcessDetails);
        when(ccrRequestProcessDetails.getProcess().getDependency()).thenReturn("1;2");
        when(ccrRequestProcessDetailsRepository.findAllDependentStatus(requestId, dependentOrderIds))
            .thenReturn(dependentStatusList);

        // Act
        boolean result = ccrRequestProcessDetailsService.isAllDependencyCompleted(ccrRequestBO, "CHANGE_END_STATUS");

        // Assert
        assertTrue(result);
    }

    @Test
    public void testIsAllDependencyCompleted_DependencyNotCompleted() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        CcrRequestBO ccrRequestBO = mock(CcrRequestBO.class);
        CcrRequestProcessDetails ccrRequestProcessDetails = mock(CcrRequestProcessDetails.class);
        List<Long> dependentOrderIds = Arrays.asList(1L, 2L);
        List<String> dependentStatusList = Collections.singletonList("OK");

        when(ccrRequestBO.getId()).thenReturn(requestId);
        when(ccrRequestProcessDetailsRepository.findRequestUsingRequestIdAndName(requestId, "CHANGE_END_STATUS"))
            .thenReturn(ccrRequestProcessDetails);
        when(ccrRequestProcessDetails.getProcess().getDependency()).thenReturn("1;2");
        when(ccrRequestProcessDetailsRepository.findAllDependentStatus(requestId, dependentOrderIds))
            .thenReturn(dependentStatusList);

        // Act & Assert
        try {
            ccrRequestProcessDetailsService.isAllDependencyCompleted(ccrRequestBO, "CHANGE_END_STATUS");
            fail("Expected SDPReportingNMSCException");
        } catch (SDPReportingNMSCException e) {
            assertEquals("Error while checking dependency: dependentOrderIds can not null/empty or finding dependentStatus in T_CCR_REQUEST_PROCESS_DETAILS table using isAllDependencyCompleted (...)", e.getMessage());
        }
    }
}
