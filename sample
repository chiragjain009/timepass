import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class CcrRequestServiceTest {

    @Mock
    private ICcrRequestRepository ccrRequestRepository;

    @InjectMocks
    private CcrRequestService ccrRequestService;

    @Before
    public void setUp() {
        // Initialize mocks
    }

    @Test
    public void testFindALLMonthlyOrQuarterlyInProgressRequests() {
        // Arrange
        List<CcrRequest> mockRequests = Arrays.asList(new CcrRequest(), new CcrRequest());
        when(ccrRequestRepository.findByRequestTypeInAndIsSimulationAndStatusAndActiveTrue(
                Arrays.asList("QUARTERLY", "MONTHLY"), false, "INPROGRESS")).thenReturn(mockRequests);

        // Act
        List<CcrRequestBO> result = ccrRequestService.findALLMonthlyOrQuarterlyInProgressRequests();

        // Assert
        assertTrue(result.size() > 0);
        verify(ccrRequestRepository).findByRequestTypeInAndIsSimulationAndStatusAndActiveTrue(
                Arrays.asList("QUARTERLY", "MONTHLY"), false, "INPROGRESS");
    }

    @Test
    public void testFindAllSimulationInProgressRequests() {
        // Arrange
        List<CcrRequest> mockRequests = Collections.singletonList(new CcrRequest());
        when(ccrRequestRepository.findByRequestTypeInAndIsSimulationAndStatusAndActiveTrue(
                Collections.singletonList("SIMULATION"), true, "INPROGRESS")).thenReturn(mockRequests);

        // Act
        List<CcrRequestBO> result = ccrRequestService.findAllSimulationInProgressRequests();

        // Assert
        assertTrue(result.size() > 0);
        verify(ccrRequestRepository).findByRequestTypeInAndIsSimulationAndStatusAndActiveTrue(
                Collections.singletonList("SIMULATION"), true, "INPROGRESS");
    }

    @Test
    public void testIsAnyRequestRunning() {
        // Arrange
        when(ccrRequestRepository.countByStatusAndIsSimulationAndActiveTrue("INPROGRESS", false)).thenReturn(1L);

        // Act
        boolean result = ccrRequestService.isAnyRequestRunning(false);

        // Assert
        assertTrue(result);
        verify(ccrRequestRepository).countByStatusAndIsSimulationAndActiveTrue("INPROGRESS", false);
    }

    @Test
    public void testFindPendingQuarterlyRequests() {
        // Arrange
        List<CcrRequest> mockRequests = Collections.singletonList(new CcrRequest());
        when(ccrRequestRepository.findByRequestTypeAndIsSimulationAndStatusAndExpectedExecutionDateLessThanEqualAndActiveTrue(
                "QUARTERLY", false, "PENDING", Calendar.getInstance().getTime())).thenReturn(mockRequests);

        // Act
        List<CcrRequestBO> result = ccrRequestService.findPendingQuarterlyRequests();

        // Assert
        assertTrue(result.size() > 0);
        verify(ccrRequestRepository).findByRequestTypeAndIsSimulationAndStatusAndExpectedExecutionDateLessThanEqualAndActiveTrue(
                "QUARTERLY", false, "PENDING", Calendar.getInstance().getTime());
    }

    @Test
    public void testUpdateStatus() throws SDPReportingNMSCException {
        // Arrange
        Long requestId = 1L;
        CcrRequest mockRequest = new CcrRequest();
        when(ccrRequestRepository.findById(requestId)).thenReturn(mockRequest);

        // Act
        ccrRequestService.updateStatus(requestId, "NEW_STATUS");

        // Assert
        verify(ccrRequestRepository).findById(requestId);
        verify(ccrRequestRepository).save(mockRequest);
    }

    @Test
    public void testUpdateLatestMonthly() {
        // Arrange
        CcrRequestBO mockRequestBO = new CcrRequestBO();
        CcrRequest mockRequest = new CcrRequest();
        when(ccrRequestRepository.findById(mockRequestBO.getId())).thenReturn(mockRequest);
        when(ccrRequestRepository.findByRequestTypeInAndStatusAndIsSimulationFalseAndLatestMonthlyTrueAndActiveTrue(
                Arrays.asList("QUARTERLY", "MONTHLY"), "OK")).thenReturn(Collections.singletonList(mockRequest));

        // Act
        ccrRequestService.updateLatestMonthly(mockRequestBO);

        // Assert
        verify(ccrRequestRepository).findById(mockRequestBO.getId());
        verify(ccrRequestRepository).save(mockRequest);
    }
}
