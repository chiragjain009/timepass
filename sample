import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.List;

public class ChangeEndStatusServiceTest {

    @Mock
    private ICCrRequestService ccrRequestService;

    @Mock
    private ICcrRequestProcessDetailsService ccrRequestProcessDetailsService;

    @InjectMocks
    private ChangeEndStatusService changeEndStatusService;

    private static final Logger logger = LoggerFactory.getLogger(ChangeEndStatusService.class);

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testStartChangeEndStatusRequests_NoRequests() throws SDPReportingNMSCException {
        // Arrange
        when(ccrRequestService.findAllMonthlyOrQuarterlyInProgressRequests()).thenReturn(Collections.emptyList());

        // Act
        changeEndStatusService.startChangeEndStatusRequests();

        // Assert
        verify(ccrRequestProcessDetailsService, never()).updateChangeEndStatusById(anyLong(), eq("OK"));
        verify(ccrRequestService, never()).updateStatus(anyLong(), eq("OK"));
        verify(ccrRequestService, never()).updateLatestMonthly(any());
    }

    @Test
    public void testStartChangeEndStatusRequests_WithRequests() throws SDPReportingNMSCException {
        // Arrange
        CcrRequestBO requestBO = mock(CcrRequestBO.class); // Mock a CcrRequestBO
        List<CcrRequestBO> requestList = Collections.singletonList(requestBO);

        when(ccrRequestService.findAllMonthlyOrQuarterlyInProgressRequests()).thenReturn(requestList);
        when(ccrRequestProcessDetailsService.isAllDependencyCompleted(any(CcrRequestBO.class), eq("CHANGE_END_STATUS"))).thenReturn(true);

        // Act
        changeEndStatusService.startChangeEndStatusRequests();

        // Assert
        verify(ccrRequestProcessDetailsService, times(1)).updateChangeEndStatusById(anyLong(), eq("OK"));
        verify(ccrRequestService, times(1)).updateStatus(anyLong(), eq("OK"));
        verify(ccrRequestService, times(1)).updateLatestMonthly(any());
    }

    @Test
    public void testStartChangeEndStatusRequests_Exception() throws SDPReportingNMSCException {
        // Arrange
        when(ccrRequestService.findAllMonthlyOrQuarterlyInProgressRequests()).thenThrow(new RuntimeException("DB Error"));

        // Act & Assert
        try {
            changeEndStatusService.startChangeEndStatusRequests();
            fail("Expected SDPReportingNMSCException");
        } catch (SDPReportingNMSCException e) {
            assertEquals("Exception: DB Error", e.getMessage());
        }
    }

    @Test
    public void testStartChangeEndStatusRequestsForSimulation_NoRequests() throws SDPReportingNMSCException {
        // Arrange
        when(ccrRequestService.findAllSimulationInProgressRequests()).thenReturn(Collections.emptyList());

        // Act
        changeEndStatusService.startChangeEndStatusRequestsForSimulation();

        // Assert
        verify(ccrRequestProcessDetailsService, never()).updateChangeEndStatusById(anyLong(), eq("OK"));
        verify(ccrRequestService, never()).updateStatus(anyLong(), eq("OK"));
    }

    @Test
    public void testStartChangeEndStatusRequestsForSimulation_WithRequests() throws SDPReportingNMSCException {
        // Arrange
        CcrRequestBO requestBO = mock(CcrRequestBO.class); // Mock a CcrRequestBO
        List<CcrRequestBO> requestList = Collections.singletonList(requestBO);

        when(ccrRequestService.findAllSimulationInProgressRequests()).thenReturn(requestList);
        when(ccrRequestProcessDetailsService.isAllDependencyCompleted(any(CcrRequestBO.class), eq("CHANGE_END_STATUS"))).thenReturn(true);

        // Act
        changeEndStatusService.startChangeEndStatusRequestsForSimulation();

        // Assert
        verify(ccrRequestProcessDetailsService, times(1)).updateChangeEndStatusById(anyLong(), eq("OK"));
        verify(ccrRequestService, times(1)).updateStatus(anyLong(), eq("OK"));
    }

    @Test
    public void testStartChangeEndStatusRequestsForSimulation_Exception() throws SDPReportingNMSCException {
        // Arrange
        when(ccrRequestService.findAllSimulationInProgressRequests()).thenThrow(new RuntimeException("DB Error"));

        // Act & Assert
        try {
            changeEndStatusService.startChangeEndStatusRequestsForSimulation();
            fail("Expected SDPReportingNMSCException");
        } catch (SDPReportingNMSCException e) {
            assertEquals("Exception: DB Error", e.getMessage());
        }
    }
}
