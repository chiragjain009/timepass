import pandas as pd
import streamlit as st
import yaml

# Load the configuration from the YAML file
with open('config.yml', 'r') as file:
    config = yaml.safe_load(file)

# Get market mapping from the config
market_mapping = config['market_mapping']

# Reverse mapping to easily filter data
reverse_mapping = {v: k for k, values in market_mapping.items() for v in values}

# Load the CSV file
df_reshaped = pd.read_csv(r'..\finalsuspectReport.csv')

# Transform the data (assuming `transform_csv` is a function you have defined)
f_reshaped = transform_csv(df_reshaped)

# Add a column for `FIN_MKT_PLCE` (example data for demonstration)
f_reshaped['FIN_MKT_PLCE'] = ['a', 'b', 'c', 'a', 'c']  # Replace this with actual data

# Add a new column for mapped market labels
f_reshaped['MARKET_LABEL'] = f_reshaped['FIN_MKT_PLCE'].map(reverse_mapping)

# Sidebar settings
with st.sidebar:
    st.title('Suspect Management Dashboard')

    # Create dropdown options
    template_list = list(f_reshaped['DEF_ATTR_TEMPLLONGNAME'].unique())[::-1]
    attr_status_list = list(f_reshaped['ATTR_STATUS'].unique())[::-1]
    attr_list = list(f_reshaped['ATTR_NUM'].unique())[::-1]
    market_list = list(market_mapping.keys())

    # Add 'ALL' option to each dropdown
    template_list.append("ALL")
    attr_status_list.append("ALL")
    attr_list.append("ALL")
    market_list.append("ALL")

    # Dropdowns for selection
    template = st.selectbox('Select a template', template_list, index=len(template_list) - 1)
    market = st.selectbox('Select a Market', market_list, index=len(market_list) - 1)

# Filter data based on template selection
df_selected_template = f_reshaped
if template != 'ALL':
    df_selected_template = df_selected_template[df_selected_template['DEF_ATTR_TEMPLLONGNAME'] == template]

# Filter data based on market selection
if market != 'ALL':
    selected_values = market_mapping[market]  # Get the original values (e.g., ['a', 'b'])
    df_selected_template = df_selected_template[df_selected_template['FIN_MKT_PLCE'].isin(selected_values)]

# Status and attribute filters (add these below if needed)
status = st.selectbox('Select a Status', attr_status_list, index=len(attr_status_list) - 1)
if status != 'ALL':
    df_selected_template = df_selected_template[df_selected_template['ATTR_STATUS'] == status]

attribute = st.selectbox('Select an Attribute', attr_list, index=len(attr_list) - 1)
if attribute != 'ALL':
    df_selected_template = df_selected_template[df_selected_template['ATTR_NUM'] == attribute]

# Display results
st.header("Number of records: " + str(len(df_selected_template)))
st.write("---")
st.write(df_selected_template)
